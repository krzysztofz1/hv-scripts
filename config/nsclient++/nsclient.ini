; Undocumented section


[/modules]

; CheckDisk - CheckDisk can check various file and disk related things. The current version has commands to check Size of hard drives and directories.
CheckDisk = 1

; Event log Checker. - Check for errors and warnings in the event log. This is only supported through NRPE so if you plan to use only NSClient this wont help you at all.
CheckEventLog = 1

; Check External Scripts - A simple wrapper to run external scripts and batch files.
CheckExternalScripts = 1

; Helper function - Various helper function to extend other checks. This is also only supported through NRPE.
CheckHelpers = 1

; Check NSCP - Checkes the state of the agent
CheckNSCP = 1

; CheckSystem - Various system related checks, such as CPU load, process state, service state memory usage and PDH counters.
CheckSystem = 1

; NRPE server - A simple server that listens for incoming NRPE connection and handles them. NRPE is preferred over NSClient as it is more flexible. You can of cource use both NSClient and NRPE.
NRPEServer = 1

; NSClient server - A simple server that listens for incoming NSClient (check_nt) connection and handles them. Although NRPE is the preferred method NSClient is fully supported and can be used for simplicity or for compatibility.
NSClientServer = 1


; Undocumented section
[/settings/default]

; ALLOWED HOSTS - A comaseparated list of allowed hosts. You can use netmasks (/ syntax) or * to create ranges.
allowed hosts = 62.181.3.200


; PASSWORD - Password used to authenticate againast server
; password = 


; Section for NRPE (NRPEListener.dll) (check_nrpe) protocol options.

[/settings/NRPE/server]
allow arguments=true
allow nasty characters=true
insecure = true  

; Section for NSClient (NSClientServer.dll) (check_nt) protocol options.
[/settings/NSClient/server]


; Section for system checks and system settings
[/settings/check/system/windows]


; Confiure which services has to be in which state
[/settings/check/system/windows/service mapping]


; Configure crash handling properties.
[/settings/crash]


; Section for the EventLog Checker (CheckEventLog.dll).
[/settings/eventlog]


; A set of options to configure the real time checks
[/settings/eventlog/real-time]


; A set of filters to use in real-time mode
[/settings/eventlog/real-time/filters]


; Section for external scripts configuration options (CheckExternalScripts).
[/settings/external scripts]


; A list of aliases available. An alias is an internal command that has been "wrapped" (to add arguments). Be careful so you don't create loops (ie check_loop=check_a, check_a=check_loop)
[/settings/external scripts/alias]


; A list of scripts available to run from the CheckExternalScripts module. Syntax is: <command>=<script> <arguments>
[/settings/external scripts/scripts]


; A list of wrappped scripts (ie. using the template mechanism)
[/settings/external scripts/wrapped scripts]


; A list of templates for wrapped scripts
[/settings/external scripts/wrappings]


; Section for configuring the log handling.
[/settings/log]


; Configure log file properties.
[/settings/log/file]


; Section for configuring the shared session.
[/settings/shared session]

[/settings/external scripts]
allow arguments = true
allow nasty characters = true
script path =
timeout = 600

[/settings/external scripts/scripts]

check_storagepool = cmd /c echo scripts\wdc\check_storagepool.ps1 $ARGS$; exit($lastexitcode) | powershell.exe -executionpolicy unrestricted -command -
check_virtualdisk = cmd /c echo scripts\wdc\check_virtualdisk.ps1 $ARGS$; exit($lastexitcode) | powershell.exe -executionpolicy unrestricted -command -
check_volume = cmd /c echo scripts\wdc\check_volume.ps1 $ARGS$; exit($lastexitcode) | powershell.exe -executionpolicy unrestricted -command -
check_physicaldisk = cmd /c echo scripts\wdc\check_physicaldisk.ps1 $ARGS$; exit($lastexitcode) | powershell.exe -executionpolicy unrestricted -command -

check_storagespaces = cmd /c echo scripts\wdc\check_storagespaces.ps1 $ARG1$; exit($lastexitcode) | powershell.exe -executionpolicy unrestricted -command -
check_arcconf_ad = cmd /c echo scripts\wdc\check_arcconf.ps1 -ModeSelect AD -AdapterID $ARG1$; exit($lastexitcode) | powershell.exe -executionpolicy unrestricted -command -
check_arcconf_ld = cmd /c echo scripts\wdc\check_arcconf.ps1 -ModeSelect LD -AdapterID $ARG1$ -LogicalDeviceID $ARG2$; exit($lastexitcode) | powershell.exe -executionpolicy unrestricted -command -
check_arcconf_pd = cmd /c echo scripts\wdc\check_arcconf.ps1 -ModeSelect PD -AdapterID $ARG1$ -SerialNumber $ARG2$; exit($lastexitcode) | powershell.exe -executionpolicy unrestricted -command -
check_raidcfg32_ld = cmd /c echo scripts\wdc\check_raidcfg32.ps1 -ModeSelect LD -LogicalDeviceID $ARG1$; exit($lastexitcode) | powershell.exe -executionpolicy unrestricted -command -
check_raidcfg32_pd = cmd /c echo scripts\wdc\check_raidcfg32.ps1 -ModeSelect PD -SerialNumber $ARG1$; exit($lastexitcode) | powershell.exe -executionpolicy unrestricted -command -
check_ipmi = cmd /c echo scripts\wdc\check_ipmi.ps1 -SensorName "$ARG1$" -Warning $ARG2$ -Critical $ARG3$; exit($lastexitcode) | powershell.exe -executionpolicy unrestricted -command -
check_replication = cmd /c echo scripts\wdc\check_replication.ps1 -VMName $ARG1$; exit($lastexitcode) | powershell.exe -executionpolicy unrestricted -command -
